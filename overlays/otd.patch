diff --git a/OpenTabletDriver.Configurations/Configurations/Pine64/PineNote.json b/OpenTabletDriver.Configurations/Configurations/Pine64/PineNote.json
new file mode 100644
index 00000000..8664bf90
--- /dev/null
+++ b/OpenTabletDriver.Configurations/Configurations/Pine64/PineNote.json
@@ -0,0 +1,25 @@
+{
+  "Name": "Pine64 PineNote",
+  "Specifications": {
+    "Digitizer": {
+      "Width": 209.66,
+      "Height": 157.25,
+      "MaxX": 20966,
+      "MaxY": 15725
+    },
+    "Pen": {
+      "MaxPressure": 4095,
+      "Buttons": {
+        "ButtonCount": 3
+      }
+    }
+  },
+  "DigitizerIdentifiers": [
+    {
+      "VendorID": 7531,
+      "ProductID": 260,
+      "InputReportLength": 15,
+      "ReportParser": "OpenTabletDriver.Configurations.Parsers.Pine64.PineNoteReportParser"
+    }
+  ]
+}
diff --git a/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteButtonReport.cs b/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteButtonReport.cs
new file mode 100644
index 00000000..79311097
--- /dev/null
+++ b/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteButtonReport.cs
@@ -0,0 +1,30 @@
+using System.Numerics;
+using OpenTabletDriver.Plugin.Tablet;
+
+namespace OpenTabletDriver.Configurations.Parsers.Pine64
+{
+    public struct PineNoteButtonReport : ITabletReport
+    {
+        public PineNoteButtonReport(byte[] report, ref Vector2 lastPosition, ref uint lastPressure, ref bool[] lastPenButtons)
+        {
+            Raw = report;
+
+            Position = lastPosition;
+            Pressure = lastPressure;
+
+            PenButtons = new bool[]
+            {
+                report[1].IsBitSet(0),
+                report[1].IsBitSet(1),
+                report[1].IsBitSet(2),
+            };
+
+            lastPenButtons = PenButtons;
+        }
+
+        public byte[] Raw { set; get; }
+        public Vector2 Position { set; get; }
+        public uint Pressure { set; get; }
+        public bool[] PenButtons { set; get; }
+    }
+}
diff --git a/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteReportParser.cs b/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteReportParser.cs
new file mode 100644
index 00000000..0519f417
--- /dev/null
+++ b/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteReportParser.cs
@@ -0,0 +1,24 @@
+using OpenTabletDriver.Plugin.Tablet;
+using System.Numerics;
+
+namespace OpenTabletDriver.Configurations.Parsers.Pine64
+{
+    public class PineNoteReportParser : IReportParser<IDeviceReport>
+    {
+        private Vector2 _lastPosition;
+        private uint _lastPressure;
+        private bool[] _lastPenButtons = new bool[3];
+
+        public IDeviceReport Parse(byte[] report)
+        {
+            switch(report[0]) {
+                case 2:
+                    return new PineNoteTabletReport(report, ref _lastPosition, ref _lastPressure, ref _lastPenButtons);
+                case 1:
+                    return new PineNoteButtonReport(report, ref _lastPosition, ref _lastPressure, ref _lastPenButtons);
+                default:
+                    return null;
+            }
+        }
+    }
+}
diff --git a/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteTabletReport.cs b/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteTabletReport.cs
new file mode 100644
index 00000000..af5460e8
--- /dev/null
+++ b/OpenTabletDriver.Configurations/Parsers/Pine64/PineNoteTabletReport.cs
@@ -0,0 +1,45 @@
+using System.Numerics;
+using System.Runtime.CompilerServices;
+using OpenTabletDriver.Plugin.Tablet;
+
+namespace OpenTabletDriver.Configurations.Parsers.Pine64
+{
+    public struct PineNoteTabletReport : ITabletReport, IProximityReport, ITiltReport
+    {
+        public PineNoteTabletReport(byte[] report, ref Vector2 lastPosition, ref uint lastPressure, ref bool[] lastPenButtons)
+        {
+            Raw = report;
+
+            Position = new Vector2
+            {
+                X = Unsafe.ReadUnaligned<ushort>(ref report[2]),
+                Y = Unsafe.ReadUnaligned<ushort>(ref report[4])
+            };
+
+            // Unit: [-9000..9000]x10^-3 degrees
+            Tilt = new Vector2
+            {
+                X = Unsafe.ReadUnaligned<short>(ref report[9]) * 0.01f,
+                Y = Unsafe.ReadUnaligned<short>(ref report[11]) * 0.01f
+            };
+
+            NearProximity = report[1].IsBitSet(5);
+
+            Pressure = Unsafe.ReadUnaligned<ushort>(ref report[6]);
+            HoverDistance = report[1].IsBitSet(0) ? 0 : (uint)report[8];
+
+            PenButtons = lastPenButtons; // Use the last known button state (button state for passive pens not implemented)
+
+            lastPosition = Position;
+            lastPressure = Pressure;
+        }
+
+        public byte[] Raw { set; get; }
+        public Vector2 Position { set; get; }
+        public Vector2 Tilt { set; get; }
+        public uint Pressure { set; get; }
+        public bool[] PenButtons { set; get; }
+        public bool NearProximity { set; get; }
+        public uint HoverDistance { set; get; }
+    }
+}
